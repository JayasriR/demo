namespace demo.functions
version "${project.version}"

import demo.types.*
import demo.enumeration.*

func Create_VehicleOwnership: <"Creation of a vehicle ownership record file">
    inputs: 
        drivingLicence DrivingLicence (0..*)
        vehicle Vehicle (1..1)
        dateOfPurchase date (1..1)
        isFirstHand boolean (1..1)
    output: 
        vehicleOwnership VehicleOwnership (1..1)

    condition: <"Driving licence must not be expired">
        drivingLicence -> dateOfRenewal all > dateOfPurchase

    condition: <"Vehicle classification allowed by the driving licence needs to encompass the vehicle classification of the considered vehicle">
        drivingLicence->vehicleEntitlement contains vehicle-> vehicleClassification

    assign-output vehicleOwnership -> drivingLicence: 
        drivingLicence

    assign-output vehicleOwnership -> vehicle: 
        vehicle

    assign-output vehicleOwnership -> dateOfPurchase: 
        dateOfPurchase
 
    assign-output vehicleOwnership -> isFirstHand: 
        isFirstHand 

func Check_DrivingLicenceRenewalDate: <"Function to check whether the driving licence is expired or not">
    inputs: 
        drivingLicence DrivingLicence (1..1)
        todayDate date (1..1)
    output:
        isExpired boolean (1..1)

    assign-output isExpired: 
        if drivingLicence->dateOfRenewal < todayDate then True
        else False

 func Check_DieselEngine: <"Function to check whether the engine of the vehicle is of diesel type">
    inputs: 
        engine Engine (1..1)
    output:
        isEngineTypeDiesel boolean (1..1)

    assign-output isEngineTypeDiesel: 
        if engine-> engineType = EngineTypeEnum -> Diesel then True 
        else False

func Check_YearOfManufacture: <"Function to check whether the year of manufacture of the vehicle is older than a year cut">
    inputs: 
        specification Specification (1..1)
        yearCut int (1..1)
    output:
        isOlderThanYearCut boolean (1..1)
    assign-output isOlderThanYearCut: 
        if specification-> yearOfManufacture < yearCut then True 
        else False

func Create_Date: <"Function to create a date for the given year, month and dayOfMonth.">
    inputs:
        year int (1..1)
        month int (1..1)
        day int (1..1)
    output:
        result date (1..1)

func FindVehiclesByEngineType: <"Find all vehicles with given engine type.">
    inputs:
        vehicles Vehicle (0..*)
        engineType EngineTypeEnum (1..1)
    output:
        vehiclesWithEngineType Vehicle (0..*)

    set vehiclesWithEngineType: <"Filter each list 'item' with the given test.">
        vehicles
            filter [ item -> specification -> engine -> engineType = engineType ]

 func FindDriversWithMaximumZeroTo60: <"Find all vehicles with given maximum 0 - 60 mph.">
    inputs:
        vehicles Vehicle (0..*)
        zeroTo60 number (1..1)
    output:
        vehiclesWithMaximumZeroTo60 Vehicle (0..*)

    set vehiclesWithMaximumZeroTo60: <"Each list 'item' can have a name specified.">
        vehicles
            filter vehicle [ vehicle -> specification -> zeroTo60 < zeroTo60 ]

func FindVehiclesWithinEmissionLimits: <"Find all vehicles within given emissions metrics.">
    inputs:
        vehicles Vehicle (0..*)
        carbonMonoxideCOLimit int (0..1)
        nitrogenOxydeNOXLimit int (0..1)
        particulateMatterPMLimit int (0..1)
    output:
        vehiclesWithinEmissionLimits Vehicle (0..*)

    set vehiclesWithinEmissionLimits: <"Filter (and other list operations) can contain expressions, and can be chained together.">
        vehicles
            filter [ if carbonMonoxideCOLimit exists then item -> specification -> engine -> emissionMetrics -> carbonMonoxideCO <= carbonMonoxideCOLimit else True ]
            filter [ if nitrogenOxydeNOXLimit exists then item -> specification -> engine -> emissionMetrics -> nitrogenOxydeNOX <= nitrogenOxydeNOXLimit else True ]
            filter [ if particulateMatterPMLimit exists then item -> specification -> engine -> emissionMetrics -> particulateMatterPM <= particulateMatterPMLimit else True ]   

func FindOwnersWithinPenaltyPointLimit: <"Find all owners within penalty point limits on any driver licence (owners can have multiple licences, issued by different countries).">
    inputs:
       owners VehicleOwnership (0..*)
       maximumPenaltyPoints int (1..1)
    output:
       ownersWithinPenaltyPointLimit VehicleOwnership (0..*)  

    set ownersWithinPenaltyPointLimit: <"Nested filter required to determine if all owner's licences do not exceed the penalty point limit.">
        owners
            filter owner [ owner -> drivingLicence
                filter licence [ licence -> penaltyPoints > maximumPenaltyPoints ] count = 0 
            ]

func GetDrivingLicenceNames: <"Get driver's names from given list of licences.">
    inputs:
        drivingLicences DrivingLicence (0..*)
    output:
        ownersName string (0..*)

    set ownersName: <"Filter lists to only include drivers with first and last names, then use 'map' to convert driving licences into list of names.">
        drivingLicences
            filter [ item -> firstName exists and item -> surname exists ]
            map [ item -> firstName + " " + item -> surname ]
